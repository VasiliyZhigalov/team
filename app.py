import asyncio

import streamlit as st
from streamlit_chat import message

import warnings

from autogen_core.application import SingleThreadedAgentRuntime
from autogen_core.base import AgentProxy, AgentId
from autogen_core.components.models import UserMessage

from messages import BroadcastMessage
from planning import llm_client
from planning.coder import Coder
from planning.orchestrator import Orchestrator

# –∑–∞–ø—É—Å–∫ g4free
import threading
from g4f.api import run_api
import g4f


def start_server_g4f():
    g4f.debug.logging = True
    run_api()



warnings.filterwarnings('ignore')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'task' not in st.session_state:
    st.session_state.task = ""
if 'plan' not in st.session_state:
    st.session_state.plan = ""
if 'summary' not in st.session_state:
    st.session_state.summary = ""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
async def run_agents(task):
    runtime = SingleThreadedAgentRuntime()
    coder = await Coder.register(
        runtime,
        "coder",
        lambda: Coder(model_client=llm_client.client)
    )
    coder = AgentProxy(AgentId("coder", "default"), runtime)
    await Orchestrator.register(
        runtime,
        "orchestrator",
        lambda: Orchestrator(
            model_client=llm_client.client,
            agents=[coder, ]
        )
    )
    runtime.start()
    orchestrator_id = AgentId("orchestrator", "default")
    result = await runtime.send_message(BroadcastMessage(content=UserMessage(task, source="user")), orchestrator_id)
    await runtime.stop_when_idle()
    return result


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(
    page_title="–î—É–º–∞—Ç–µ–ª—å",
    page_icon="üåü",
    layout="wide",  # –î–µ–ª–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∏—Ä–æ–∫–æ–π
    initial_sidebar_state="expanded"  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
)
with st.spinner('–°–µ—Ä–≤–µ—Ä g4f –∑–∞–ø—É—â–µ–Ω...'):
    thread = threading.Thread(target=start_server_g4f)
    thread.start()

for sender, str_message in st.session_state.chat_history:
    if sender == 'user':
        message(str_message, is_user=True)
    else:
        message(str_message, is_user=False)

if chat_input := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"):
    with st.chat_message("user"):
        st.markdown(chat_input)
    st.session_state.chat_history.append(('user', chat_input))
    with st.spinner('–ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π...'):
        asyncio.run(run_agents(chat_input))

with st.sidebar:
    with st.expander("–ü–ª–∞–Ω"):
        text_container = st.empty()
        text_container.text_area("–ü–ª–∞–Ω", value=st.session_state.plan, height=600)

    text_container1 = st.empty()
    with text_container1.expander("–†–µ–∑—é–º–µ"):
        user_input = st.text_area("–°–≤–æ–¥:", value=st.session_state.summary, height=600)
